@model DayzlightWebapp.Models.LivemapModel
@{
    System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
    var maxPlayers = Model.Timepoints.Max(x => x.PlayerMovements.Count);
    var bottomOffset = (int)Math.Max(20 + (maxPlayers * 5), 50);
}

<div id="map-div" class="div-map" style="bottom:@Html.Raw(bottomOffset)px">
    <canvas id="map-canvas"></canvas>
</div>
<div id="timeline-left-div" class="div-left-timeline" style="height:@Html.Raw(bottomOffset)px">
@if (Model.ServerLastRestartInfo != null)
{
    <button class="invis-button" 
            onclick="getState.rtime = '@Html.Raw(Model.ServerLastRestartInfo.TimePoint.ToBinary())'; redirectGetState();">
        <span class="glyphicon glyphicon-backward span-invis-button"></span>
    </button>
}
else
{
    <button class="invis-button-disable">
        <span class="glyphicon glyphicon-backward span-invis-button-disable"></span>
    </button>
}
</div>
<div id="timeline-div" class="div-timeline" style="height:@Html.Raw(bottomOffset)px">
    <canvas id="timeline-canvas"></canvas>
</div>
<div id="timeline-right-div" class="div-right-timeline" style="height:@Html.Raw(bottomOffset)px">
@if (Model.ServerNextRestartInfo != null)
{
    <button class="invis-button" 
            onclick="getState.rtime = '@Html.Raw(Model.ServerNextRestartInfo.TimePoint.ToBinary())'; redirectGetState();">
        <span class="glyphicon glyphicon-forward span-invis-button"></span>
    </button>
}
else
{
    <button class="invis-button-disable">
        <span class="glyphicon glyphicon-forward span-invis-button-disable"></span>
    </button>
}
</div>
<div>
    <div id="map-menu-btn" class="div-map-btn"
        style="visibility:@Html.Raw(!Model.Settings.MenuExpanded ? "visible" : "hidden")">
        <button class="invis-button" 
                onclick="showHideMenu(true);"
                style="padding-top:10px;">
            <span class="glyphicon glyphicon glyphicon-th span-invis-button" 
                  style="color:#ffffff; font-size:24px;"></span>
        </button>
    </div>
    <div id="map-menu-div" class="div-map-menu" 
         style="width: 250px; bottom:@Html.Raw(bottomOffset)px; 
         visibility:@Html.Raw(Model.Settings.MenuExpanded ? "visible" : "hidden");
         overflow-y:@Html.Raw(Model.Settings.MenuExpanded ? "scroll" : "hidden");">
        <button class="invis-button" 
                onclick="showHideMenu(false);">
            <span class="glyphicon glyphicon-chevron-right span-invis-button" style="color:#ffffff;">
            </span>
                    
        </button>
        <b style="color: white; font-size: large">SETTINGS</b> 
        <br>   
        <div class="panel autocollapse">
            <div class="panel-heading clickable">
                <h3 class="panel-title">
                    General
                </h3>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <label style="color:white">Players path length:</label>
                    <input id="PlayersPathLength" class="slider" type="text"
                           data-slider-min="0" data-slider-max="100"
                           data-slider-step="1" data-slider-value="@Html.Raw(Model.Settings.PlayersPathLength)" />
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var mapimg = new Image;
    mapimg.src = '@Html.Raw("/Content/Maps/" + Model.ServerCurRestartInfo.WorldName + "/map.png")';

    var timePoints = [
    @foreach(var tp in Model.Timepoints)
    {
    @:{
    @:    TimePoint: "@Html.Raw(tp.TimePoint.ToString("o"))",
    @:    PlayerMovements: [
          foreach (var plmov in tp.PlayerMovements.OrderBy(x => x.PlayerName.PlayerInfo.Uid))
          {
    @:        {
    @:            PosX: @Html.Raw(plmov.PosX),
    @:            PosY: @Html.Raw(plmov.PosY),
    @:            Dir: @Html.Raw(plmov.Dir),
    @:            Name: "@Html.Raw(plmov.PlayerName.Name)",
    @:            Uid: "@Html.Raw(plmov.PlayerName.PlayerInfo.Uid)",
    @:            Color: "#@Html.Raw(plmov.PlayerName.PlayerInfo.Color)"
    @:        },
          }
    @:    ]
    @:},
    }
    ];
    var currentTimePointId = timePoints.length - 1;
    var updateMap;
    var pathLength = @Html.Raw(Model.Settings.PlayersPathLength);
    var hideSpawnTp = true;
    var clearPathAfterDisconnect = true;
    var iconsOverlayColor = "rgba(102,102,102,0.8)";
    var iconsSize = 1;

    var getState = {
        rtime: '@Html.Raw(Model.ServerCurRestartInfo.TimePoint.ToBinary())'
    };

    var redirectGetState = function () {
        location.href = '@Url.Action("Livemap")?' + jQuery.param(getState);
    }

    var sendCommand = function (command, data) {
        $.get('@Url.Action("Livemap")', { command: command, data: data });
    }

    var showHideMenu = function (show) {
        if (show === true) {
            document.getElementById('map-menu-btn').style.visibility = 'hidden';
            document.getElementById('map-menu-div').style.visibility = 'visible';
            document.getElementById('map-menu-div').style.overflowY = 'scroll';
        }
        else {
            document.getElementById('map-menu-div').style.visibility = 'hidden';
            document.getElementById('map-menu-btn').style.visibility = 'visible';
            document.getElementById('map-menu-div').style.overflowY = 'hidden';
        }
        sendCommand('@Html.Raw(nameof(Model.Settings.MenuExpanded))', show);
    }

    Math.utc = function(dt) {
        var date = new Date(Date.parse(dt));
        return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));
    }

    Math.radians = function (degrees) {
        return degrees * Math.PI / 180;
    }

    function trackTransforms(ctx) {
        var svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
        var xform = svg.createSVGMatrix();
        ctx.getTransform = function () { return xform; };

        var savedTransforms = [];
        var save = ctx.save;
        ctx.save = function () {
            savedTransforms.push(xform.translate(0, 0));
            return save.call(ctx);
        };

        var restore = ctx.restore;
        ctx.restore = function () {
            xform = savedTransforms.pop();
            return restore.call(ctx);
        };

        var scale = ctx.scale;
        ctx.scale = function (sx, sy) {
            xform = xform.scaleNonUniform(sx, sy);
            return scale.call(ctx, sx, sy);
        };

        var rotate = ctx.rotate;
        ctx.rotate = function (radians) {
            xform = xform.rotate(radians * 180 / Math.PI);
            return rotate.call(ctx, radians);
        };

        var translate = ctx.translate;
        ctx.translate = function (dx, dy) {
            xform = xform.translate(dx, dy);
            return translate.call(ctx, dx, dy);
        };

        var transform = ctx.transform;
        ctx.transform = function (a, b, c, d, e, f) {
            var m2 = svg.createSVGMatrix();
            m2.a = a; m2.b = b; m2.c = c; m2.d = d; m2.e = e; m2.f = f;
            xform = xform.multiply(m2);
            return transform.call(ctx, a, b, c, d, e, f);
        };

        var setTransform = ctx.setTransform;
        ctx.setTransform = function (a, b, c, d, e, f) {
            xform.a = a;
            xform.b = b;
            xform.c = c;
            xform.d = d;
            xform.e = e;
            xform.f = f;
            return setTransform.call(ctx, a, b, c, d, e, f);
        };

        var pt = svg.createSVGPoint();
        ctx.transformedPoint = function (x, y) {
            pt.x = x; pt.y = y;
            return pt.matrixTransform(xform.inverse());
        }
    }

    function mapProcessing() {
        var canvas = document.getElementById("map-canvas");
        var mapwidth = @Html.Raw(Model.ServerCurRestartInfo.MaxCornerX - Model.ServerCurRestartInfo.MinCornerX);
        var mapheight = @Html.Raw(Model.ServerCurRestartInfo.MaxCornerY - Model.ServerCurRestartInfo.MinCornerY);
        var ctx = null;
        // Draw player
        var drawPlayerIcon = function (x, y, rad, ang, dir, sizeMod, color) {
            ctx.fillStyle = ctx.strokeStyle = color;
            ctx.beginPath();
            ctx.arc(x, y, rad * sizeMod, 0, 2 * Math.PI);
            ctx.fill();

            ctx.beginPath();
            ctx.moveTo(
                x - (Math.sin(Math.radians(dir - ang)) * (rad * sizeMod)),
                y + (Math.cos(Math.radians(dir - ang)) * (rad * sizeMod))
            );
            ctx.lineTo(
                x - (Math.sin(Math.radians(dir)) * (rad * sizeMod * 1.6)),
                y + (Math.cos(Math.radians(dir)) * (rad * sizeMod * 1.6))
            );
            ctx.lineTo(
                x - (Math.sin(Math.radians(dir + ang)) * (rad * sizeMod)),
                y + (Math.cos(Math.radians(dir + ang)) * (rad * sizeMod))
            );
            ctx.closePath();
            ctx.fill();
        }

        var drawPlayerName = function (x, y, rad, color, nameColor, nameText) {
            var textHeight = rad * 1.8;
            var textOffset = rad * 2;
            ctx.font = textHeight + "px bold Helvetica, Arial, sans-serif";

            var width = ctx.measureText(nameText).width;
            var offset = rad / 4;
            ctx.fillStyle = color;
            ctx.fillRect(x + textOffset - offset, y - textOffset - textHeight, width + (2 * offset), textHeight + (2 * offset));

            ctx.fillStyle = nameColor;
            ctx.fillText(nameText, x + textOffset, y - textOffset);
        }

        // Draw path for player
        var drawPlayerPath = function (x1, y1, x2, y2, width, color) {
            ctx.fillStyle = ctx.strokeStyle = color;
            ctx.lineWidth = width;
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();

            ctx.beginPath();
            ctx.arc(x2, y2, width * 0.5, 0, 2 * Math.PI);
            ctx.fill();
        }

        var drawAllPlayers = function (p1, p2, isOverlay) {
            if (currentTimePointId >= 0) {
                var rad = ((p2.x - Math.max(0, p1.x)) / (canvas.width * 0.15)) * iconsSize;
                var ang = 45;
                var sizeMod = isOverlay ? 1.4 : 1;
                var linew = Math.min(rad / 2, Math.max(1, (rad / 2)));
                var playerHeads = [];

                if (isOverlay) {
                    linew += ((rad * sizeMod) - rad) * 2;
                }
                
                for (var drawId = currentTimePointId - pathLength >= 0 ? currentTimePointId - pathLength : 0;
                    drawId <= currentTimePointId; drawId++) {
                    timePoints[drawId].PlayerMovements.forEach(function (plmov) {
                        // Check if need to draw
                        var skip = false;

                        // Check by disconnect
                        skip |= clearPathAfterDisconnect && !timePoints[currentTimePointId].PlayerMovements.find(function (x) {
                            return x.Uid === plmov.Uid
                        });

                        // Check by distance from spawn
                        skip |= hideSpawnTp && Math.sqrt(
                            Math.pow(plmov.PosX - @Html.Raw(Model.ServerCurRestartInfo.SpawnPointX), 2) +
                            Math.pow(plmov.PosY - @Html.Raw(Model.ServerCurRestartInfo.SpawnPointY), 2)
                        ) < 100;

                        if (!skip) {
                            // Calculate path
                            var last = null;
                            var fillColor = isOverlay ? iconsOverlayColor : plmov.Color;
                            if (pathLength > 0 && drawId > 0 && timePoints[drawId - 1]) {
                                var lastCandidate = timePoints[drawId - 1].PlayerMovements.find(function (x) {
                                    return x.Uid === plmov.Uid
                                });

                                if (lastCandidate && (!hideSpawnTp || Math.sqrt(
                                    Math.pow(lastCandidate.PosX - @Html.Raw(Model.ServerCurRestartInfo.SpawnPointX), 2) +
                                    Math.pow(lastCandidate.PosY - @Html.Raw(Model.ServerCurRestartInfo.SpawnPointY), 2)
                                ) >= 100)) {
                                    last = lastCandidate;
                                }
                            }

                            // Draw body and path
                            if (last) {
                                drawPlayerPath(plmov.PosX, mapheight - plmov.PosY, last.PosX, mapheight - last.PosY, linew, fillColor);
                            }
                            if (currentTimePointId == drawId) {
                                if (isOverlay) {
                                    drawPlayerIcon(plmov.PosX, mapheight - plmov.PosY, rad, ang, plmov.Dir + 180, sizeMod, fillColor);
                                }
                                else {
                                    playerHeads.push({
                                        x: plmov.PosX,
                                        y: mapheight - plmov.PosY,
                                        dir: plmov.Dir + 180,
                                        color: plmov.Color,
                                        name: plmov.Name
                                    });
                                }
                            }
                        }
                    });
                }

                if (!isOverlay) {
                    // Draw heads
                    playerHeads.forEach(function (i) {
                        drawPlayerIcon(i.x, i.y, rad, ang, i.dir, sizeMod, i.color);
                    });

                    // Draw names
                    playerHeads.forEach(function (i) {
                        drawPlayerName(i.x, i.y, rad, iconsOverlayColor, i.color, i.name);
                    });
                }
            }
        }

        // Redraw all canvas
        var redraw = updateMap = function () {
            // Clear canvas
            var p1 = ctx.transformedPoint(0, 0);
            var p2 = ctx.transformedPoint(canvas.width, canvas.height);
            ctx.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);

            ctx.save();
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.restore();

            // Draw map
            ctx.drawImage(mapimg, 0, 0, mapwidth, mapheight);

            // Draw players
            drawAllPlayers(p1, p2, true);
            drawAllPlayers(p1, p2, false);
        }

        var processResize = function () {
            canvas.width = $("#map-div").innerWidth();
            canvas.height = $("#map-div").innerHeight();
        }

        var resize = function (first) {
            var matrix;
            if (!first) {
                matrix = ctx.getTransform();
            }

            processResize();
            ctx = canvas.getContext('2d');
            trackTransforms(ctx);

            if (first) {
                ctx.scale(0.25, 0.25);
            }
            else {
                ctx.setTransform(
                    matrix.a,
                    matrix.b,
                    matrix.c,
                    matrix.d,
                    matrix.e,
                    matrix.f
                );
            }

            fixTranlation();
            redraw();
        };

        var fixTranlation = function () {
            var fixmin = ctx.transformedPoint(0, 0);
            if (fixmin.x < 0) {
                ctx.translate(fixmin.x, 0);
            }
            if (fixmin.y < 0) {
                ctx.translate(0, fixmin.y);
            }

            var fixmax = ctx.transformedPoint(canvas.width, canvas.height);
            if (fixmax.x > mapwidth) {
                ctx.translate((fixmax.x - mapwidth), 0);
            }

            if (fixmax.y > mapheight) {
                ctx.translate(0, (fixmax.y - mapheight));
            }
        }

        var dragStart = null;
        var lastX = canvas.width / 2, lastY = canvas.height / 2;
        resize(true);

        canvas.addEventListener('mousedown', function (evt) {
            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            dragStart = ctx.transformedPoint(lastX, lastY);
        }, false);

        canvas.addEventListener('mousemove', function (evt) {
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            if (dragStart) {
                var pt = ctx.transformedPoint(lastX, lastY);
                ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);
                fixTranlation();
                redraw();
            }
        }, false);

        canvas.addEventListener('mouseup', function (evt) {
            dragStart = null;
        }, false);

        canvas.addEventListener('mouseleave', function () {
            dragStart = null;
        }, false);

        var scaleFactor = 1.05;
        var zoom = function (clicks) {
            var pt = ctx.transformedPoint(lastX, lastY);
            var min = ctx.transformedPoint(0, 0);
            var max = ctx.transformedPoint(canvas.width, canvas.height);
            var factor = Math.pow(scaleFactor, clicks);

            var needScale = false;
            if (factor > 1) {
                if (max.x - Math.max(0, min.x) > 1000 &&
                    max.y - Math.max(0, min.y) > 1000) {
                    needScale = true;
                }
            }
            else if (factor < 1) {
                if ((max.x - Math.max(0, min.x)) / factor < mapwidth &&
                    (max.y - Math.max(0, min.y)) / factor < mapheight) {
                    needScale = true;
                }
            }

            if (needScale) {
                ctx.translate(pt.x, pt.y);
                ctx.scale(factor, factor);
                ctx.translate(-pt.x, -pt.y);
            }

            fixTranlation();
            redraw();
        }

        var handleScroll = function (evt) {
            var delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;
            if (delta) zoom(delta);
            return evt.preventDefault() && false;
        };

        canvas.addEventListener('DOMMouseScroll', handleScroll, false);
        canvas.addEventListener('mousewheel', handleScroll, false);
        window.addEventListener('resize', function () { resize(false); }, false);
    };

    function timelineProcessing() {
        var step = 10;
        var canvas = document.getElementById("timeline-canvas");
        var ctx = null;
        var redraw = function () {
            // Clear the entire canvas
            var p1 = ctx.transformedPoint(0, 0);
            var p2 = ctx.transformedPoint(canvas.width, canvas.height);
            ctx.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);

            ctx.save();
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.fillStyle = "#222222";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.restore();

            // Draw timeline
            ctx.fillStyle = "#2C6330";
            var i = 0;
            var padding = 2;
            var ploffsets = [];
            timePoints.forEach(function (tp) {
                // Draw marks
                var yoffset = canvas.height - 5;
                ctx.fillStyle = "#999999";
                if (i % 5 == 0) { yoffset -= 5; }
                if (i % 10 == 0) { yoffset -= 5; }
                if (i == 0 || i == timePoints.length - 1) {
                    yoffset = 0;
                    ctx.fillStyle = "#2C6330";
                }
                ctx.fillRect(i * step, yoffset + padding, 1, canvas.height - yoffset);

                // Draw player lines
                tp.PlayerMovements.forEach(function (plmov) {
                    if (i < timePoints.length - 1) {
                        ctx.fillStyle = plmov.Color;
                        var plq = ploffsets.findIndex(function (x) { return x == plmov.Uid });
                        if (plq < 0) {
                            for (plq = 0; plq < ploffsets.length; plq++) {
                                if (!ploffsets[plq] || tp.PlayerMovements.findIndex(function (txx) { return txx.Uid == ploffsets[plq] }) == -1) {
                                    ploffsets[plq] = plmov.Uid;
                                    break;
                                }
                            }
                            if (plq == ploffsets.length) {
                                ploffsets.push(plmov.Uid);
                            }
                        }
                        ctx.fillRect(i * step, (plq * 5) + padding, step, 3);
                    }
                });

                i++;
            });

            // Draw carret time
            var carret = ctx.transformedPoint(canvas.width / 2, 0);
            var pointId = Math.floor(carret.x / step);
            ctx.fillStyle = "#D62727";
            ctx.font = "12px Helvetica, Arial, sans-serif";
            ctx.fillRect(carret.x, 0, 2, canvas.height);
            if (currentTimePointId >= 0) {
                var date_utc = Math.utc(timePoints[currentTimePointId].TimePoint);
                var date_txt1 = date_utc.toLocaleTimeString();
                var date_txt2 = date_utc.toLocaleDateString();
                var date_txt1_width = ctx.measureText(date_txt1).width;
                var date_txt2_width = ctx.measureText(date_txt2).width;
                ctx.fillStyle = "rgba(60,60,60,0.8)";
                ctx.fillRect(carret.x - 6 - date_txt2_width, 0, date_txt1_width + date_txt2_width + 14, 16);
                ctx.fillStyle = "#ffffff";
                ctx.fillText(date_txt1, carret.x + 6, 14);
                ctx.fillText(date_txt2, carret.x - 4 - date_txt2_width, 14);
            }

            // Draw carret
            var newTimePointId = pointId < 0
                ? 0
                : timePoints[pointId]
                    ? pointId
                    : timePoints.length - 1;

            if (newTimePointId != currentTimePointId) {
                currentTimePointId = newTimePointId;
                updateMap();
            }
        }

        var processResize = function () {
            canvas.width = $("#timeline-div").innerWidth();
            canvas.height = $("#timeline-div").innerHeight();
        }

        var resize = function () {
            processResize();
            ctx = canvas.getContext('2d');
            trackTransforms(ctx);
            @if (Model.ServerNextRestartInfo == null)
            {
                @: ctx.translate((canvas.width / 2) - ((timePoints.length - 1) * step), 0);
            }
            else
            {
                @: ctx.translate((canvas.width / 2), 0);
            }
            redraw();
        }

        var fixBounds = function () {
            var pt = ctx.transformedPoint(canvas.width / 2, 0);
            var maxBound = (timePoints.length - 1) * step;
            if (pt.x < 0) {
                ctx.translate(pt.x, 0);
            }
            else if (pt.x > maxBound) {
                ctx.translate(pt.x - maxBound, 0);
            }
        }

        resize();

        var dragStart;
        var lastX = 0;
        canvas.addEventListener('mousedown', function (evt) {
            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            dragStart = ctx.transformedPoint(lastX, 0);
        }, false);

        canvas.addEventListener('mousemove', function (evt) {
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            if (dragStart) {
                var pt = ctx.transformedPoint(lastX, 0);
                ctx.translate(pt.x - dragStart.x, 0);
                fixBounds();
                redraw();
            }
        }, false);

        canvas.addEventListener('mouseup', function (evt) {
            dragStart = null;
        }, false);

        canvas.addEventListener('mouseleave', function () {
            dragStart = null;
        }, false);

        var move = function (clicks) {
            ctx.translate(clicks * -step, 0);
            fixBounds();
            redraw();
        }

        var handleScroll = function (evt) {
            var delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;
            if (delta) move(delta);
            return evt.preventDefault() && false;
        };

        canvas.addEventListener('DOMMouseScroll', handleScroll, false);
        canvas.addEventListener('mousewheel', handleScroll, false);
        window.addEventListener('resize', resize, false);
    };

    window.addEventListener("load", function () {
        $('.slider').slider({
            formatter: function (value) {
                return value;
            }
        }).on('slideStop', function (ev) {
            if (ev.target.id === "@Html.Raw(nameof(Model.Settings.PlayersPathLength))") {
                pathLength = ev.value;
                updateMap();
            }
            else {
                return;
            }
            sendCommand(ev.target.id, ev.value);
        });;

        mapProcessing();
        timelineProcessing();

        $(document).on('click', '.panel div.clickable', function (e) {
            var $this = $(this);
            var $panel = $this.parent('.panel');
            var $panel_body = $panel.children('.panel-body');
            var $display = $panel_body.css('display');

            if ($display == 'block') {
                $panel_body.slideUp();
            } else if ($display == 'none') {
                $panel_body.slideDown();
            }
        });
    }, false);
</script>
